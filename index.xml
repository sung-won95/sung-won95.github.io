<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Jan 2021 09:58:35 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>뉴스 기사 크롤링을 통한 키워드 추출 및 실시간 트렌드 제공 서비스 [Trendak]</title>
      <link>/idea/newsbotreport/</link>
      <pubDate>Mon, 04 Jan 2021 08:58:32 +0900</pubDate>
      
      <guid>/idea/newsbotreport/</guid>
      <description>안녕하세요 오늘은 사업계획서를 공유해보려고 합니다. 이 글은 작년 10월 모 창업 경진대회에 제출한 문서를 거의 그대로 옮겼습니다. 해당 대회에서 본선에는 들었지만 발표평가에서 떨어진 문서입니다. 사업계획서를 쓰시는 분들께 도움이 되었으면 합니다. 더불어서 피드백은 언제나 환영입니다!
1-1. 제품의 차별성 실시간성  1분단위의 실시간 모니터링을 통해 누구보다 빠른 정보전달 가능 기존 어플리케이션들의 서비스 제공 시간폭은 유료 기준 30분 - 1시간 소요  능동적 정보제공  굳이 찾아보지 않아도 알아서 방대한 양의 정보를 정리하여 제공해줌 바쁜 현대인들에게 스스로 시의성 있는 정보와 트렌드를 전달함  제목 기반 키워드 제공  자동 요약 시스템을 통해 부담 없이 손쉽게 트렌드 파악 가능 기사 전체가 아닌 이미 요약되어 있는 제목만을 크롤링 함으로써 더 빠르고 적은 데이터로 서비스 구축 가능  접근성  별도의 앱 설치 없이 카카오톡 챗봇을 이용하여 누구나 쉽게 사용 가능  안드로이드&amp;amp;IOS 이용자 모두 이용가능   앱 알람이 아닌 다수가 사용하는 카카오톡 메시지 알람으로 다른 앱 이용보다 번거로움이 적음  확장성   내용을 집약하여 제목을 작성하는 다른 데이터에 동일한 메커니즘 적용 가능</description>
    </item>
    
    <item>
      <title>docker-compose에서 NFS 사용하기</title>
      <link>/devops/docker-volumn-nfs/</link>
      <pubDate>Tue, 24 Nov 2020 14:02:42 +0900</pubDate>
      
      <guid>/devops/docker-volumn-nfs/</guid>
      <description>Docker-compose Setting version: &amp;#39;3.1&amp;#39; volumes: nfs-data: #nfs volume 이름 지정  driver: local  driver_opts: type: nfs  #nfs 서비스로 지정  device: &amp;#34;:/your/nfs/path&amp;#34; #nfs mount 경로 o: &amp;#34;addr=192.168.2.27,nolock,soft,rw&amp;#34; #nfs서버 세팅 services: AI-blur: image: blur deploy: resources: limits: cpus: &amp;#39;24&amp;#39; memory: 128G build: context: . dockerfile: blur/Dockerfile environment: - NVIDIA_VISIBLE_DEVICES=2,3,4,5  #GPU 설정 env volumes: - nfs-blur:/root/workspace/nfs-data  # [volume명]:[컨테이너 내부 마운트 위치] stdin_open: true tty: true docker-compose에서도 위와같이 nfs를 사용 할 수 있습니다!</description>
    </item>
    
    <item>
      <title>Opencv를 이용하여 YOLOv4로 CCTV 영상 분석하기</title>
      <link>/tech/rtsp-opencv-yolov4/</link>
      <pubDate>Tue, 24 Nov 2020 14:02:42 +0900</pubDate>
      
      <guid>/tech/rtsp-opencv-yolov4/</guid>
      <description>프롤로그 안녕하세요 오늘은 OpenCV를 사용하여 CCTV video stream(RTSP)에 YOLO를 돌린 프로젝트 후기를 남겨보려고 합니다. 이 프로젝트는 실시간으로 object detecting 하는 것을 최우선 목표로 진행했습니다. 2K CCTV에서 RTSP 서버를 열어주고 딥러닝(YOLO v4)을 통해 object detecting을 진행 한 뒤 모니터링 서버에서 보여줄때까지 지연시간이 2초 이하로 진행해야 했습니다.
환경 &amp;amp; 목표 w
 CCTV : 2K RTSP Stream, 16EA Network : 10G GPU : Tesla T4, 8EA AI Model : YOLO v4, 5개 object 구분 목표 : 모니터링 서버에서 2초 이내 detecting object 확인  설계도 RTSP → YOLO v4(분석) | Tesla T4 이용 → View</description>
    </item>
    
    <item>
      <title>Ubuntu GPU Server NVIDIA Driver 설치 방법</title>
      <link>/devops/nvidia-driver-install/</link>
      <pubDate>Tue, 24 Nov 2020 14:02:42 +0900</pubDate>
      
      <guid>/devops/nvidia-driver-install/</guid>
      <description>nvidia driver 설치 전 사전 세팅  OS : ubuntu 18.04  apt-get install -y gcc make #nouveau blacklist 설정 echo &amp;#34;blacklist nouveau&amp;#34; &amp;gt;&amp;gt; /etc/modprobe.d/blacklist.conf echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf update-initramfs -u # options 에서 설정한 값 적용 코드 reboot now # blacklist 적용용 reboot  nvidia driver 검색 후 설치  nvidia.com 에 접속 제품 에 맞는 드라이버 선택 후 검색다운로드 하기(wget 가능)  wget [http://us.</description>
    </item>
    
    <item>
      <title>Docker에서 원하는 GPU선택해 컨테이너로 Project실행하기</title>
      <link>/devops/docker-gpu-1/</link>
      <pubDate>Fri, 20 Nov 2020 16:54:37 +0900</pubDate>
      
      <guid>/devops/docker-gpu-1/</guid>
      <description>기본 서버 설정 OS : Ubuntu 18.04
Install Package: Nvidia-driver &amp;amp; nvidia-docker 설치
Docker GPU 사용 세팅 docker 명령어를 사용하면 기본적으로 /usr/bin 경로에 있는 docker 파일이 실행됩니다. 하지만 우리의 목적은 GPU를 사용하는 것 이기 때문에 docker 명령어가 아닌 nvidia-docker를 사용해야 합니다. docker 와 nvidia-docker를 번갈아가면서 사용하게 된다면 헷갈리기도 하고 kubernetes, docker-compose에서는 기본적으로 docker파일을 실행하도록 설정되어 있기 때문에 default runtime을 nvidia-docker로 사용 할 수 있도록 세팅해 줘야 합니다.
/etc/docker/daemon.json파일 중 첫번째줄에 &amp;ldquo;default-runtime&amp;rdquo;: &amp;ldquo;nvidia&amp;quot;부분을 추가해 주면 세팅은 완료 됩니다.</description>
    </item>
    
    <item>
      <title>postgres replication 하는방법</title>
      <link>/database/postgres-replication-setting/</link>
      <pubDate>Fri, 20 Nov 2020 16:54:37 +0900</pubDate>
      
      <guid>/database/postgres-replication-setting/</guid>
      <description>master 서버와 slave 서버에 각각 설정하는 방법이 다릅니다
MASTER 설정   user 생성
# psql을 Postgres 유저로 접속 후 유저 생성 sudo -u postgres psql CREATE ROLE replication WITH REPLICATION PASSWORD &amp;#39;password&amp;#39; LOGIN;   /etc/postgresql/9.5/main/postgresql.conf 파일 수정
wal_level = hot_standby max_wal_senders = 2 max_replication_slots = 2   /etc/postgresql/9.5/main/hba.conf 파일 수정
아래 문구 추가
host all all 192.168.0.138/24 trust host replication replication 192.168.0.138/24 md5 host all all ::1/128 trust   postgresql 재시작</description>
    </item>
    
  </channel>
</rss>
