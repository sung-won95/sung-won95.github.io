<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>클린코드 on 성원의 개발 블로그</title>
    <link>https://sung-won95.github.io/categories/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/</link>
    <description>Recent content in 클린코드 on 성원의 개발 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>euc-kr</language>
    <lastBuildDate>Sat, 29 Jan 2022 09:24:37 +0900</lastBuildDate><atom:link href="https://sung-won95.github.io/categories/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6장 주석</title>
      <link>https://sung-won95.github.io/p/6%EC%9E%A5-%EC%A3%BC%EC%84%9D/</link>
      <pubDate>Sat, 29 Jan 2022 09:24:37 +0900</pubDate>
      
      <guid>https://sung-won95.github.io/p/6%EC%9E%A5-%EC%A3%BC%EC%84%9D/</guid>
      <description>오류처리 오류처리는 코드를 작성함에 있어서 무조건 작성해야하는 기능이다. 모든 프로그램은 잘못될 가능성이 있기 때문이다. 이 오류코드들을 그때그때 처리하게되면 프로그램을 한눈에 파악하기 힘들어지기 때문에 우아하고 고상하게 오류를 처리하는 기법과 고려사항 몇가지를 소개한다.
오류코드보다 예외를 사용해라 public void sendShutDown(){ DeviceHandle handle = getHandle(DEV1); if(handle != DeviceHandle.INVALID){ retrieveDeviceRecord(handle); if(record.getStatus() != DeviceHandle.SUSPENDED){ //record.set 어쩌구  //이서비스 저서비스 	} else{ // device suspended 오류 발생 예외코드 	} } else { //Invalid handle 오류 발생 예외코드 	} } 이렇게 오류코드를 사용하면 호출자 코드도 보기 불편하고 복잡해진다</description>
    </item>
    
    <item>
      <title>1장 클린코드</title>
      <link>https://sung-won95.github.io/p/1%EC%9E%A5-%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/</link>
      <pubDate>Wed, 19 Jan 2022 10:24:37 +0900</pubDate>
      
      <guid>https://sung-won95.github.io/p/1%EC%9E%A5-%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/</guid>
      <description>1장 - 깨끗한 코드 나쁜코드는 생산성을 떨어트린다 (개발방향을 산정하지 않은코드는 생산성을 떨어트린다)
C++ 창시자 나는 우아하고 효율적인 코드를 좋아한다. 논리가 간단해야 버그가 없기 때문이다. 의존성을 줄여야 유지보수가 쉬워진다. 깨끗한 코드는 한가지를 제대로 한다. 깨끗한 코드는 단순하고 직접적이다. 깨끗한 코드는 잘 쓴 문장처럼 잘 읽히고 설계자의 의도를 바로 알 수 있다. 오히려 명쾌한 추상화와 단순한 제어문으로 가득하다 코드는 추측이아니라 사실에 기반해야한다. 반드시 필요한 내용만 담아야하며 단호하게 끝내야한다. 이클립스 창시자 깨끗한 코드는 작성자가 아닌 사람도 읽기쉽고 고치기 쉽다.</description>
    </item>
    
    <item>
      <title>2장 함수</title>
      <link>https://sung-won95.github.io/p/2%EC%9E%A5-%ED%95%A8%EC%88%98/</link>
      <pubDate>Wed, 19 Jan 2022 09:24:37 +0900</pubDate>
      
      <guid>https://sung-won95.github.io/p/2%EC%9E%A5-%ED%95%A8%EC%88%98/</guid>
      <description>함수 함수는 굉장히 작게 만들어야한다. 함수가 커지면 커질수록 한번에 읽고 파악해야하는 코드의 양이 커져 이해하기 어렵다. 그렇기 때문에 함수는 아주 작은 기능 한개만 하는것을 만들고 작은 함수들이 모여 하나의 기능을 실행하게 만들어야한다. 이번장은 함수를 만들때 몇가지 규칙을 알려준다. 이 규칙을 다 지킬수는 없겠지만 지키려는 노력을 하다보면 내 코드가 조금씩 더 나아지며 뿌듯해질것이다!
함수를 만드는 규칙 작게 만들어라!  작아지면 코드가 단순 명료해지기에 이해하기 쉬워진다 어떻게 작게 만드나? 단순히 짧게 만들면 되는 것인가?</description>
    </item>
    
    <item>
      <title>3장 주석</title>
      <link>https://sung-won95.github.io/p/3%EC%9E%A5-%EC%A3%BC%EC%84%9D/</link>
      <pubDate>Wed, 19 Jan 2022 09:24:37 +0900</pubDate>
      
      <guid>https://sung-won95.github.io/p/3%EC%9E%A5-%EC%A3%BC%EC%84%9D/</guid>
      <description>주석의 개념  코드로 직접 실행되지 않지만 코드를 설명하는 문장이나 글  저자가 바라보는 주석이란? 잘 달린 주석은 그 어떤 정보보다 유용하다. 다만 보통 주석은 오래되고 조잡하며 거짓과 잘못된 정보를 줘 코드를 이해하기 어렵게 만든다. 저자의 표현으로는 사실상 주석은 기껏해야 필요악이라고 한다. 코드로 본인의 의도를 잘 표현하지 못해 주석을 쓴 것이고 본인의 실패를 만회하기위해 사용한다고 한다. 코드는 지속적인 리팩토링으로 점점 진화하면서 완벽해진다. 하지만 주석은 언제나 코드를 따라 변하지 못한다. 그렇게 주석이 코드에서 분리되어 점점 더 부정확해지고 마침내 고아로 변하는 사례가 흔하다고 한다.</description>
    </item>
    
    <item>
      <title>4장 형식 맞추기</title>
      <link>https://sung-won95.github.io/p/4%EC%9E%A5-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0/</link>
      <pubDate>Wed, 19 Jan 2022 09:24:37 +0900</pubDate>
      
      <guid>https://sung-won95.github.io/p/4%EC%9E%A5-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0/</guid>
      <description>형식 맞추기 코드가 깔끔하고, 일관적이며, 꼼꼼하다고 감탄하면 좋겠다. 질서 정연하다고 탄복하면 좋겠다. 모듈을 읽으며 두눈이 휘둥그래 놀라면 좋겠다. 전문가가 짰다는 인상을 심어주면 좋겠다. 프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다. 규칙을 정하고 착실히 따라야한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다.
형식을 맞추는 목적 코드 형식은 중요하다! 너무 중요해서 무시하기 어렵다. 의사소통의 일환이며 전문 개발자의 일차적인 의무이다. &amp;lsquo;돌아가는 코드&amp;rsquo; 가 전문 개발자의 일차적인 의무라 여길지도 모르겠다. 오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 힘들 정도로 코드가 바뀌어도 맨 처음 잡아놓은 규율은 사라지지 않는다.</description>
    </item>
    
  </channel>
</rss>
